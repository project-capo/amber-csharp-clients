// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Amber.Protos {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Ninedof {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::Amber.Protos.Ninedof.SensorData);
      registry.Add(global::Amber.Protos.Ninedof.DataRequest);
      registry.Add(global::Amber.Protos.Ninedof.SubscribeAction);
    }
    #endregion
    #region Extensions
    public const int SensorDataFieldNumber = 10;
    public static pb::GeneratedExtensionBase<global::Amber.Protos.SensorData> SensorData;
    public const int DataRequestFieldNumber = 11;
    public static pb::GeneratedExtensionBase<global::Amber.Protos.DataRequest> DataRequest;
    public const int SubscribeActionFieldNumber = 12;
    public static pb::GeneratedExtensionBase<global::Amber.Protos.SubscribeAction> SubscribeAction;
    #endregion
    
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_amber_SensorData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SensorData, global::Amber.Protos.SensorData.Builder> internal__static_amber_SensorData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_SensorData_AxisData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SensorData.Types.AxisData, global::Amber.Protos.SensorData.Types.AxisData.Builder> internal__static_amber_SensorData_AxisData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_DataRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DataRequest, global::Amber.Protos.DataRequest.Builder> internal__static_amber_DataRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_SubscribeAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SubscribeAction, global::Amber.Protos.SubscribeAction.Builder> internal__static_amber_SubscribeAction__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Ninedof() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg1uaW5lZG9mLnByb3RvEgVhbWJlchokZ29vZ2xlL3Byb3RvYnVmL2NzaGFy" + 
          "cF9vcHRpb25zLnByb3RvGg9kcml2ZXJtc2cucHJvdG8i2QEKClNlbnNvckRh" + 
          "dGESKQoFYWNjZWwYASABKAsyGi5hbWJlci5TZW5zb3JEYXRhLkF4aXNEYXRh" + 
          "EigKBGd5cm8YAiABKAsyGi5hbWJlci5TZW5zb3JEYXRhLkF4aXNEYXRhEioK" + 
          "Bm1hZ25ldBgDIAEoCzIaLmFtYmVyLlNlbnNvckRhdGEuQXhpc0RhdGESEQoJ" + 
          "dGltZXN0YW1wGAQgASgNGjcKCEF4aXNEYXRhEg0KBXhBeGlzGAEgAigREg0K" + 
          "BXlBeGlzGAIgAigREg0KBXpBeGlzGAMgAigRIjoKC0RhdGFSZXF1ZXN0Eg0K" + 
          "BWFjY2VsGAEgASgIEgwKBGd5cm8YAiABKAgSDgoGbWFnbmV0GAMgASgIIkwK" + 
          "D1N1YnNjcmliZUFjdGlvbhIMCgRmcmVxGAEgASgNEg0KBWFjY2VsGAIgASgI" + 
          "EgwKBGd5cm8YAyABKAgSDgoGbWFnbmV0GAQgASgIOjcKCnNlbnNvckRhdGES" + 
          "EC5hbWJlci5Ecml2ZXJNc2cYCiABKAsyES5hbWJlci5TZW5zb3JEYXRhOjkK" + 
          "C2RhdGFSZXF1ZXN0EhAuYW1iZXIuRHJpdmVyTXNnGAsgASgLMhIuYW1iZXIu" + 
          "RGF0YVJlcXVlc3Q6QQoPc3Vic2NyaWJlQWN0aW9uEhAuYW1iZXIuRHJpdmVy" + 
          "TXNnGAwgASgLMhYuYW1iZXIuU3Vic2NyaWJlQWN0aW9uQhrCPhcKDEFtYmVy" + 
          "LlByb3RvcxIHTmluZWRvZg==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_amber_SensorData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_amber_SensorData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SensorData, global::Amber.Protos.SensorData.Builder>(internal__static_amber_SensorData__Descriptor,
                new string[] { "Accel", "Gyro", "Magnet", "Timestamp", });
        internal__static_amber_SensorData_AxisData__Descriptor = internal__static_amber_SensorData__Descriptor.NestedTypes[0];
        internal__static_amber_SensorData_AxisData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SensorData.Types.AxisData, global::Amber.Protos.SensorData.Types.AxisData.Builder>(internal__static_amber_SensorData_AxisData__Descriptor,
                new string[] { "XAxis", "YAxis", "ZAxis", });
        internal__static_amber_DataRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_amber_DataRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DataRequest, global::Amber.Protos.DataRequest.Builder>(internal__static_amber_DataRequest__Descriptor,
                new string[] { "Accel", "Gyro", "Magnet", });
        internal__static_amber_SubscribeAction__Descriptor = Descriptor.MessageTypes[2];
        internal__static_amber_SubscribeAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.SubscribeAction, global::Amber.Protos.SubscribeAction.Builder>(internal__static_amber_SubscribeAction__Descriptor,
                new string[] { "Freq", "Accel", "Gyro", "Magnet", });
        global::Amber.Protos.Ninedof.SensorData = pb::GeneratedSingleExtension<global::Amber.Protos.SensorData>.CreateInstance(global::Amber.Protos.Ninedof.Descriptor.Extensions[0]);
        global::Amber.Protos.Ninedof.DataRequest = pb::GeneratedSingleExtension<global::Amber.Protos.DataRequest>.CreateInstance(global::Amber.Protos.Ninedof.Descriptor.Extensions[1]);
        global::Amber.Protos.Ninedof.SubscribeAction = pb::GeneratedSingleExtension<global::Amber.Protos.SubscribeAction>.CreateInstance(global::Amber.Protos.Ninedof.Descriptor.Extensions[2]);
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        global::Amber.Protos.AmberProto.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          global::Amber.Protos.AmberProto.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SensorData : pb::GeneratedMessage<SensorData, SensorData.Builder> {
    private SensorData() { }
    private static readonly SensorData defaultInstance = new SensorData().MakeReadOnly();
    private static readonly string[] _sensorDataFieldNames = new string[] { "accel", "gyro", "magnet", "timestamp" };
    private static readonly uint[] _sensorDataFieldTags = new uint[] { 10, 18, 26, 32 };
    public static SensorData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SensorData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SensorData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_SensorData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SensorData, SensorData.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_SensorData__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class AxisData : pb::GeneratedMessage<AxisData, AxisData.Builder> {
        private AxisData() { }
        private static readonly AxisData defaultInstance = new AxisData().MakeReadOnly();
        private static readonly string[] _axisDataFieldNames = new string[] { "xAxis", "yAxis", "zAxis" };
        private static readonly uint[] _axisDataFieldTags = new uint[] { 8, 16, 24 };
        public static AxisData DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AxisData DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AxisData ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Amber.Protos.Ninedof.internal__static_amber_SensorData_AxisData__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AxisData, AxisData.Builder> InternalFieldAccessors {
          get { return global::Amber.Protos.Ninedof.internal__static_amber_SensorData_AxisData__FieldAccessorTable; }
        }
        
        public const int XAxisFieldNumber = 1;
        private bool hasXAxis;
        private int xAxis_;
        public bool HasXAxis {
          get { return hasXAxis; }
        }
        public int XAxis {
          get { return xAxis_; }
        }
        
        public const int YAxisFieldNumber = 2;
        private bool hasYAxis;
        private int yAxis_;
        public bool HasYAxis {
          get { return hasYAxis; }
        }
        public int YAxis {
          get { return yAxis_; }
        }
        
        public const int ZAxisFieldNumber = 3;
        private bool hasZAxis;
        private int zAxis_;
        public bool HasZAxis {
          get { return hasZAxis; }
        }
        public int ZAxis {
          get { return zAxis_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasXAxis) return false;
            if (!hasYAxis) return false;
            if (!hasZAxis) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _axisDataFieldNames;
          if (hasXAxis) {
            output.WriteSInt32(1, field_names[0], XAxis);
          }
          if (hasYAxis) {
            output.WriteSInt32(2, field_names[1], YAxis);
          }
          if (hasZAxis) {
            output.WriteSInt32(3, field_names[2], ZAxis);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasXAxis) {
              size += pb::CodedOutputStream.ComputeSInt32Size(1, XAxis);
            }
            if (hasYAxis) {
              size += pb::CodedOutputStream.ComputeSInt32Size(2, YAxis);
            }
            if (hasZAxis) {
              size += pb::CodedOutputStream.ComputeSInt32Size(3, ZAxis);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static AxisData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AxisData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AxisData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AxisData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AxisData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AxisData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AxisData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AxisData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AxisData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AxisData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AxisData MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AxisData prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AxisData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AxisData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AxisData result;
          
          private AxisData PrepareBuilder() {
            if (resultIsReadOnly) {
              AxisData original = result;
              result = new AxisData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AxisData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Amber.Protos.SensorData.Types.AxisData.Descriptor; }
          }
          
          public override AxisData DefaultInstanceForType {
            get { return global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance; }
          }
          
          public override AxisData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AxisData) {
              return MergeFrom((AxisData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AxisData other) {
            if (other == global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasXAxis) {
              XAxis = other.XAxis;
            }
            if (other.HasYAxis) {
              YAxis = other.YAxis;
            }
            if (other.HasZAxis) {
              ZAxis = other.ZAxis;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_axisDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _axisDataFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasXAxis = input.ReadSInt32(ref result.xAxis_);
                  break;
                }
                case 16: {
                  result.hasYAxis = input.ReadSInt32(ref result.yAxis_);
                  break;
                }
                case 24: {
                  result.hasZAxis = input.ReadSInt32(ref result.zAxis_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasXAxis {
            get { return result.hasXAxis; }
          }
          public int XAxis {
            get { return result.XAxis; }
            set { SetXAxis(value); }
          }
          public Builder SetXAxis(int value) {
            PrepareBuilder();
            result.hasXAxis = true;
            result.xAxis_ = value;
            return this;
          }
          public Builder ClearXAxis() {
            PrepareBuilder();
            result.hasXAxis = false;
            result.xAxis_ = 0;
            return this;
          }
          
          public bool HasYAxis {
            get { return result.hasYAxis; }
          }
          public int YAxis {
            get { return result.YAxis; }
            set { SetYAxis(value); }
          }
          public Builder SetYAxis(int value) {
            PrepareBuilder();
            result.hasYAxis = true;
            result.yAxis_ = value;
            return this;
          }
          public Builder ClearYAxis() {
            PrepareBuilder();
            result.hasYAxis = false;
            result.yAxis_ = 0;
            return this;
          }
          
          public bool HasZAxis {
            get { return result.hasZAxis; }
          }
          public int ZAxis {
            get { return result.ZAxis; }
            set { SetZAxis(value); }
          }
          public Builder SetZAxis(int value) {
            PrepareBuilder();
            result.hasZAxis = true;
            result.zAxis_ = value;
            return this;
          }
          public Builder ClearZAxis() {
            PrepareBuilder();
            result.hasZAxis = false;
            result.zAxis_ = 0;
            return this;
          }
        }
        static AxisData() {
          object.ReferenceEquals(global::Amber.Protos.Ninedof.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AccelFieldNumber = 1;
    private bool hasAccel;
    private global::Amber.Protos.SensorData.Types.AxisData accel_;
    public bool HasAccel {
      get { return hasAccel; }
    }
    public global::Amber.Protos.SensorData.Types.AxisData Accel {
      get { return accel_ ?? global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance; }
    }
    
    public const int GyroFieldNumber = 2;
    private bool hasGyro;
    private global::Amber.Protos.SensorData.Types.AxisData gyro_;
    public bool HasGyro {
      get { return hasGyro; }
    }
    public global::Amber.Protos.SensorData.Types.AxisData Gyro {
      get { return gyro_ ?? global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance; }
    }
    
    public const int MagnetFieldNumber = 3;
    private bool hasMagnet;
    private global::Amber.Protos.SensorData.Types.AxisData magnet_;
    public bool HasMagnet {
      get { return hasMagnet; }
    }
    public global::Amber.Protos.SensorData.Types.AxisData Magnet {
      get { return magnet_ ?? global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance; }
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private uint timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return timestamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasAccel) {
          if (!Accel.IsInitialized) return false;
        }
        if (HasGyro) {
          if (!Gyro.IsInitialized) return false;
        }
        if (HasMagnet) {
          if (!Magnet.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sensorDataFieldNames;
      if (hasAccel) {
        output.WriteMessage(1, field_names[0], Accel);
      }
      if (hasGyro) {
        output.WriteMessage(2, field_names[1], Gyro);
      }
      if (hasMagnet) {
        output.WriteMessage(3, field_names[2], Magnet);
      }
      if (hasTimestamp) {
        output.WriteUInt32(4, field_names[3], Timestamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccel) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Accel);
        }
        if (hasGyro) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Gyro);
        }
        if (hasMagnet) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Magnet);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SensorData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SensorData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SensorData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SensorData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SensorData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SensorData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SensorData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SensorData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SensorData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SensorData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SensorData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SensorData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SensorData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SensorData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SensorData result;
      
      private SensorData PrepareBuilder() {
        if (resultIsReadOnly) {
          SensorData original = result;
          result = new SensorData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SensorData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.SensorData.Descriptor; }
      }
      
      public override SensorData DefaultInstanceForType {
        get { return global::Amber.Protos.SensorData.DefaultInstance; }
      }
      
      public override SensorData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SensorData) {
          return MergeFrom((SensorData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SensorData other) {
        if (other == global::Amber.Protos.SensorData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccel) {
          MergeAccel(other.Accel);
        }
        if (other.HasGyro) {
          MergeGyro(other.Gyro);
        }
        if (other.HasMagnet) {
          MergeMagnet(other.Magnet);
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sensorDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sensorDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Amber.Protos.SensorData.Types.AxisData.Builder subBuilder = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder();
              if (result.hasAccel) {
                subBuilder.MergeFrom(Accel);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Accel = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Amber.Protos.SensorData.Types.AxisData.Builder subBuilder = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder();
              if (result.hasGyro) {
                subBuilder.MergeFrom(Gyro);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gyro = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Amber.Protos.SensorData.Types.AxisData.Builder subBuilder = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder();
              if (result.hasMagnet) {
                subBuilder.MergeFrom(Magnet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Magnet = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTimestamp = input.ReadUInt32(ref result.timestamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccel {
       get { return result.hasAccel; }
      }
      public global::Amber.Protos.SensorData.Types.AxisData Accel {
        get { return result.Accel; }
        set { SetAccel(value); }
      }
      public Builder SetAccel(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccel = true;
        result.accel_ = value;
        return this;
      }
      public Builder SetAccel(global::Amber.Protos.SensorData.Types.AxisData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAccel = true;
        result.accel_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAccel(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAccel &&
            result.accel_ != global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance) {
            result.accel_ = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder(result.accel_).MergeFrom(value).BuildPartial();
        } else {
          result.accel_ = value;
        }
        result.hasAccel = true;
        return this;
      }
      public Builder ClearAccel() {
        PrepareBuilder();
        result.hasAccel = false;
        result.accel_ = null;
        return this;
      }
      
      public bool HasGyro {
       get { return result.hasGyro; }
      }
      public global::Amber.Protos.SensorData.Types.AxisData Gyro {
        get { return result.Gyro; }
        set { SetGyro(value); }
      }
      public Builder SetGyro(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGyro = true;
        result.gyro_ = value;
        return this;
      }
      public Builder SetGyro(global::Amber.Protos.SensorData.Types.AxisData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGyro = true;
        result.gyro_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGyro(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGyro &&
            result.gyro_ != global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance) {
            result.gyro_ = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder(result.gyro_).MergeFrom(value).BuildPartial();
        } else {
          result.gyro_ = value;
        }
        result.hasGyro = true;
        return this;
      }
      public Builder ClearGyro() {
        PrepareBuilder();
        result.hasGyro = false;
        result.gyro_ = null;
        return this;
      }
      
      public bool HasMagnet {
       get { return result.hasMagnet; }
      }
      public global::Amber.Protos.SensorData.Types.AxisData Magnet {
        get { return result.Magnet; }
        set { SetMagnet(value); }
      }
      public Builder SetMagnet(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMagnet = true;
        result.magnet_ = value;
        return this;
      }
      public Builder SetMagnet(global::Amber.Protos.SensorData.Types.AxisData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMagnet = true;
        result.magnet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMagnet(global::Amber.Protos.SensorData.Types.AxisData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMagnet &&
            result.magnet_ != global::Amber.Protos.SensorData.Types.AxisData.DefaultInstance) {
            result.magnet_ = global::Amber.Protos.SensorData.Types.AxisData.CreateBuilder(result.magnet_).MergeFrom(value).BuildPartial();
        } else {
          result.magnet_ = value;
        }
        result.hasMagnet = true;
        return this;
      }
      public Builder ClearMagnet() {
        PrepareBuilder();
        result.hasMagnet = false;
        result.magnet_ = null;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimestamp(uint value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
    }
    static SensorData() {
      object.ReferenceEquals(global::Amber.Protos.Ninedof.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataRequest : pb::GeneratedMessage<DataRequest, DataRequest.Builder> {
    private DataRequest() { }
    private static readonly DataRequest defaultInstance = new DataRequest().MakeReadOnly();
    private static readonly string[] _dataRequestFieldNames = new string[] { "accel", "gyro", "magnet" };
    private static readonly uint[] _dataRequestFieldTags = new uint[] { 8, 16, 24 };
    public static DataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_DataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataRequest, DataRequest.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_DataRequest__FieldAccessorTable; }
    }
    
    public const int AccelFieldNumber = 1;
    private bool hasAccel;
    private bool accel_;
    public bool HasAccel {
      get { return hasAccel; }
    }
    public bool Accel {
      get { return accel_; }
    }
    
    public const int GyroFieldNumber = 2;
    private bool hasGyro;
    private bool gyro_;
    public bool HasGyro {
      get { return hasGyro; }
    }
    public bool Gyro {
      get { return gyro_; }
    }
    
    public const int MagnetFieldNumber = 3;
    private bool hasMagnet;
    private bool magnet_;
    public bool HasMagnet {
      get { return hasMagnet; }
    }
    public bool Magnet {
      get { return magnet_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataRequestFieldNames;
      if (hasAccel) {
        output.WriteBool(1, field_names[0], Accel);
      }
      if (hasGyro) {
        output.WriteBool(2, field_names[1], Gyro);
      }
      if (hasMagnet) {
        output.WriteBool(3, field_names[2], Magnet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccel) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Accel);
        }
        if (hasGyro) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Gyro);
        }
        if (hasMagnet) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Magnet);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataRequest result;
      
      private DataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DataRequest original = result;
          result = new DataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.DataRequest.Descriptor; }
      }
      
      public override DataRequest DefaultInstanceForType {
        get { return global::Amber.Protos.DataRequest.DefaultInstance; }
      }
      
      public override DataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataRequest) {
          return MergeFrom((DataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataRequest other) {
        if (other == global::Amber.Protos.DataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccel) {
          Accel = other.Accel;
        }
        if (other.HasGyro) {
          Gyro = other.Gyro;
        }
        if (other.HasMagnet) {
          Magnet = other.Magnet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccel = input.ReadBool(ref result.accel_);
              break;
            }
            case 16: {
              result.hasGyro = input.ReadBool(ref result.gyro_);
              break;
            }
            case 24: {
              result.hasMagnet = input.ReadBool(ref result.magnet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccel {
        get { return result.hasAccel; }
      }
      public bool Accel {
        get { return result.Accel; }
        set { SetAccel(value); }
      }
      public Builder SetAccel(bool value) {
        PrepareBuilder();
        result.hasAccel = true;
        result.accel_ = value;
        return this;
      }
      public Builder ClearAccel() {
        PrepareBuilder();
        result.hasAccel = false;
        result.accel_ = false;
        return this;
      }
      
      public bool HasGyro {
        get { return result.hasGyro; }
      }
      public bool Gyro {
        get { return result.Gyro; }
        set { SetGyro(value); }
      }
      public Builder SetGyro(bool value) {
        PrepareBuilder();
        result.hasGyro = true;
        result.gyro_ = value;
        return this;
      }
      public Builder ClearGyro() {
        PrepareBuilder();
        result.hasGyro = false;
        result.gyro_ = false;
        return this;
      }
      
      public bool HasMagnet {
        get { return result.hasMagnet; }
      }
      public bool Magnet {
        get { return result.Magnet; }
        set { SetMagnet(value); }
      }
      public Builder SetMagnet(bool value) {
        PrepareBuilder();
        result.hasMagnet = true;
        result.magnet_ = value;
        return this;
      }
      public Builder ClearMagnet() {
        PrepareBuilder();
        result.hasMagnet = false;
        result.magnet_ = false;
        return this;
      }
    }
    static DataRequest() {
      object.ReferenceEquals(global::Amber.Protos.Ninedof.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SubscribeAction : pb::GeneratedMessage<SubscribeAction, SubscribeAction.Builder> {
    private SubscribeAction() { }
    private static readonly SubscribeAction defaultInstance = new SubscribeAction().MakeReadOnly();
    private static readonly string[] _subscribeActionFieldNames = new string[] { "accel", "freq", "gyro", "magnet" };
    private static readonly uint[] _subscribeActionFieldTags = new uint[] { 16, 8, 24, 32 };
    public static SubscribeAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubscribeAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubscribeAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_SubscribeAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubscribeAction, SubscribeAction.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.Ninedof.internal__static_amber_SubscribeAction__FieldAccessorTable; }
    }
    
    public const int FreqFieldNumber = 1;
    private bool hasFreq;
    private uint freq_;
    public bool HasFreq {
      get { return hasFreq; }
    }
    [global::System.CLSCompliant(false)]
    public uint Freq {
      get { return freq_; }
    }
    
    public const int AccelFieldNumber = 2;
    private bool hasAccel;
    private bool accel_;
    public bool HasAccel {
      get { return hasAccel; }
    }
    public bool Accel {
      get { return accel_; }
    }
    
    public const int GyroFieldNumber = 3;
    private bool hasGyro;
    private bool gyro_;
    public bool HasGyro {
      get { return hasGyro; }
    }
    public bool Gyro {
      get { return gyro_; }
    }
    
    public const int MagnetFieldNumber = 4;
    private bool hasMagnet;
    private bool magnet_;
    public bool HasMagnet {
      get { return hasMagnet; }
    }
    public bool Magnet {
      get { return magnet_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _subscribeActionFieldNames;
      if (hasFreq) {
        output.WriteUInt32(1, field_names[1], Freq);
      }
      if (hasAccel) {
        output.WriteBool(2, field_names[0], Accel);
      }
      if (hasGyro) {
        output.WriteBool(3, field_names[2], Gyro);
      }
      if (hasMagnet) {
        output.WriteBool(4, field_names[3], Magnet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFreq) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Freq);
        }
        if (hasAccel) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Accel);
        }
        if (hasGyro) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Gyro);
        }
        if (hasMagnet) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Magnet);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubscribeAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubscribeAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubscribeAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubscribeAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubscribeAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubscribeAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubscribeAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SubscribeAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubscribeAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubscribeAction result;
      
      private SubscribeAction PrepareBuilder() {
        if (resultIsReadOnly) {
          SubscribeAction original = result;
          result = new SubscribeAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubscribeAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.SubscribeAction.Descriptor; }
      }
      
      public override SubscribeAction DefaultInstanceForType {
        get { return global::Amber.Protos.SubscribeAction.DefaultInstance; }
      }
      
      public override SubscribeAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubscribeAction) {
          return MergeFrom((SubscribeAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubscribeAction other) {
        if (other == global::Amber.Protos.SubscribeAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFreq) {
          Freq = other.Freq;
        }
        if (other.HasAccel) {
          Accel = other.Accel;
        }
        if (other.HasGyro) {
          Gyro = other.Gyro;
        }
        if (other.HasMagnet) {
          Magnet = other.Magnet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_subscribeActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _subscribeActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFreq = input.ReadUInt32(ref result.freq_);
              break;
            }
            case 16: {
              result.hasAccel = input.ReadBool(ref result.accel_);
              break;
            }
            case 24: {
              result.hasGyro = input.ReadBool(ref result.gyro_);
              break;
            }
            case 32: {
              result.hasMagnet = input.ReadBool(ref result.magnet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFreq {
        get { return result.hasFreq; }
      }
      [global::System.CLSCompliant(false)]
      public uint Freq {
        get { return result.Freq; }
        set { SetFreq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFreq(uint value) {
        PrepareBuilder();
        result.hasFreq = true;
        result.freq_ = value;
        return this;
      }
      public Builder ClearFreq() {
        PrepareBuilder();
        result.hasFreq = false;
        result.freq_ = 0;
        return this;
      }
      
      public bool HasAccel {
        get { return result.hasAccel; }
      }
      public bool Accel {
        get { return result.Accel; }
        set { SetAccel(value); }
      }
      public Builder SetAccel(bool value) {
        PrepareBuilder();
        result.hasAccel = true;
        result.accel_ = value;
        return this;
      }
      public Builder ClearAccel() {
        PrepareBuilder();
        result.hasAccel = false;
        result.accel_ = false;
        return this;
      }
      
      public bool HasGyro {
        get { return result.hasGyro; }
      }
      public bool Gyro {
        get { return result.Gyro; }
        set { SetGyro(value); }
      }
      public Builder SetGyro(bool value) {
        PrepareBuilder();
        result.hasGyro = true;
        result.gyro_ = value;
        return this;
      }
      public Builder ClearGyro() {
        PrepareBuilder();
        result.hasGyro = false;
        result.gyro_ = false;
        return this;
      }
      
      public bool HasMagnet {
        get { return result.hasMagnet; }
      }
      public bool Magnet {
        get { return result.Magnet; }
        set { SetMagnet(value); }
      }
      public Builder SetMagnet(bool value) {
        PrepareBuilder();
        result.hasMagnet = true;
        result.magnet_ = value;
        return this;
      }
      public Builder ClearMagnet() {
        PrepareBuilder();
        result.hasMagnet = false;
        result.magnet_ = false;
        return this;
      }
    }
    static SubscribeAction() {
      object.ReferenceEquals(global::Amber.Protos.Ninedof.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
