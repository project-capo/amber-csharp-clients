// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace amber.roboclaw_proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Roboclaw {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::amber.roboclaw_proto.Roboclaw.MotorsCommands);
      registry.Add(global::amber.roboclaw_proto.Roboclaw.CurrentSpeedRequests);
      registry.Add(global::amber.roboclaw_proto.Roboclaw.CurrentSpeeds);
      registry.Add(global::amber.roboclaw_proto.Roboclaw.SetPidConstantsRequests);
    }
    #endregion
    #region Extensions
    public const int MotorsCommandsFieldNumber = 10;
    public static pb::GeneratedExtensionBase<scg::IList<global::amber.roboclaw_proto.MotorsCommand>> MotorsCommands;
    public const int CurrentSpeedRequestsFieldNumber = 11;
    public static pb::GeneratedExtensionBase<scg::IList<global::amber.roboclaw_proto.CurrentSpeedRequest>> CurrentSpeedRequests;
    public const int CurrentSpeedsFieldNumber = 12;
    public static pb::GeneratedExtensionBase<scg::IList<global::amber.roboclaw_proto.CurrentSpeed>> CurrentSpeeds;
    public const int SetPidConstantsRequestsFieldNumber = 13;
    public static pb::GeneratedExtensionBase<scg::IList<global::amber.roboclaw_proto.SetPidConstantsRequest>> SetPidConstantsRequests;
    #endregion
    
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_amber_roboclaw_proto_MotorsCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.MotorsCommand, global::amber.roboclaw_proto.MotorsCommand.Builder> internal__static_amber_roboclaw_proto_MotorsCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_roboclaw_proto_SetPidConstantsRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.SetPidConstantsRequest, global::amber.roboclaw_proto.SetPidConstantsRequest.Builder> internal__static_amber_roboclaw_proto_SetPidConstantsRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_roboclaw_proto_CurrentSpeedRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.CurrentSpeedRequest, global::amber.roboclaw_proto.CurrentSpeedRequest.Builder> internal__static_amber_roboclaw_proto_CurrentSpeedRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_roboclaw_proto_CurrentSpeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.CurrentSpeed, global::amber.roboclaw_proto.CurrentSpeed.Builder> internal__static_amber_roboclaw_proto_CurrentSpeed__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Roboclaw() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5yb2JvY2xhdy5wcm90bxIUYW1iZXIucm9ib2NsYXdfcHJvdG8aD2RyaXZl" + 
          "cm1zZy5wcm90byK0AQoNTW90b3JzQ29tbWFuZBIPCgdhZGRyZXNzGAEgAigN" + 
          "Eg8KB20xU3BlZWQYAiABKAUSDwoHbTFBY2NlbBgDIAEoDRISCgptMURpc3Rh" + 
          "bmNlGAQgASgNEhIKCm0xQnVmZmVyZWQYBSABKAgSDwoHbTJTcGVlZBgGIAEo" + 
          "BRIPCgdtMkFjY2VsGAcgASgNEhIKCm0yRGlzdGFuY2UYCCABKA0SEgoKbTJC" + 
          "dWZmZXJlZBgJIAEoCCJYChZTZXRQaWRDb25zdGFudHNSZXF1ZXN0Eg8KB2Fk" + 
          "ZHJlc3MYASACKA0SDAoEcXBwcxgCIAIoDRIJCgFwGAMgAigNEgkKAWkYBCAC" + 
          "KA0SCQoBZBgFIAIoDSJWChNDdXJyZW50U3BlZWRSZXF1ZXN0Eg8KB2FkZHJl" + 
          "c3MYASACKA0SFgoHbTFTcGVlZBgCIAIoCDoFZmFsc2USFgoHbTJTcGVlZBgD" + 
          "IAIoCDoFZmFsc2UiQQoMQ3VycmVudFNwZWVkEg8KB2FkZHJlc3MYASACKA0S" + 
          "DwoHbTFTcGVlZBgCIAEoBRIPCgdtMlNwZWVkGAMgASgFOk0KDm1vdG9yc0Nv" + 
          "bW1hbmRzEhAuYW1iZXIuRHJpdmVyTXNnGAogAygLMiMuYW1iZXIucm9ib2Ns" + 
          "YXdfcHJvdG8uTW90b3JzQ29tbWFuZDpZChRjdXJyZW50U3BlZWRSZXF1ZXN0" + 
          "cxIQLmFtYmVyLkRyaXZlck1zZxgLIAMoCzIpLmFtYmVyLnJvYm9jbGF3X3By" + 
          "b3RvLkN1cnJlbnRTcGVlZFJlcXVlc3Q6SwoNY3VycmVudFNwZWVkcxIQLmFt" + 
          "YmVyLkRyaXZlck1zZxgMIAMoCzIiLmFtYmVyLnJvYm9jbGF3X3Byb3RvLkN1" + 
          "cnJlbnRTcGVlZDpfChdzZXRQaWRDb25zdGFudHNSZXF1ZXN0cxIQLmFtYmVy" + 
          "LkRyaXZlck1zZxgNIAMoCzIsLmFtYmVyLnJvYm9jbGF3X3Byb3RvLlNldFBp" + 
          "ZENvbnN0YW50c1JlcXVlc3RCHwoOcm9ib2NsYXcucHJvdG9CDVJvYm9jbGF3" + 
          "UHJvdG8=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_amber_roboclaw_proto_MotorsCommand__Descriptor = Descriptor.MessageTypes[0];
        internal__static_amber_roboclaw_proto_MotorsCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.MotorsCommand, global::amber.roboclaw_proto.MotorsCommand.Builder>(internal__static_amber_roboclaw_proto_MotorsCommand__Descriptor,
                new string[] { "Address", "M1Speed", "M1Accel", "M1Distance", "M1Buffered", "M2Speed", "M2Accel", "M2Distance", "M2Buffered", });
        internal__static_amber_roboclaw_proto_SetPidConstantsRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_amber_roboclaw_proto_SetPidConstantsRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.SetPidConstantsRequest, global::amber.roboclaw_proto.SetPidConstantsRequest.Builder>(internal__static_amber_roboclaw_proto_SetPidConstantsRequest__Descriptor,
                new string[] { "Address", "Qpps", "P", "I", "D", });
        internal__static_amber_roboclaw_proto_CurrentSpeedRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_amber_roboclaw_proto_CurrentSpeedRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.CurrentSpeedRequest, global::amber.roboclaw_proto.CurrentSpeedRequest.Builder>(internal__static_amber_roboclaw_proto_CurrentSpeedRequest__Descriptor,
                new string[] { "Address", "M1Speed", "M2Speed", });
        internal__static_amber_roboclaw_proto_CurrentSpeed__Descriptor = Descriptor.MessageTypes[3];
        internal__static_amber_roboclaw_proto_CurrentSpeed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::amber.roboclaw_proto.CurrentSpeed, global::amber.roboclaw_proto.CurrentSpeed.Builder>(internal__static_amber_roboclaw_proto_CurrentSpeed__Descriptor,
                new string[] { "Address", "M1Speed", "M2Speed", });
        global::amber.roboclaw_proto.Roboclaw.MotorsCommands = pb::GeneratedRepeatExtension<global::amber.roboclaw_proto.MotorsCommand>.CreateInstance(global::amber.roboclaw_proto.Roboclaw.Descriptor.Extensions[0]);
        global::amber.roboclaw_proto.Roboclaw.CurrentSpeedRequests = pb::GeneratedRepeatExtension<global::amber.roboclaw_proto.CurrentSpeedRequest>.CreateInstance(global::amber.roboclaw_proto.Roboclaw.Descriptor.Extensions[1]);
        global::amber.roboclaw_proto.Roboclaw.CurrentSpeeds = pb::GeneratedRepeatExtension<global::amber.roboclaw_proto.CurrentSpeed>.CreateInstance(global::amber.roboclaw_proto.Roboclaw.Descriptor.Extensions[2]);
        global::amber.roboclaw_proto.Roboclaw.SetPidConstantsRequests = pb::GeneratedRepeatExtension<global::amber.roboclaw_proto.SetPidConstantsRequest>.CreateInstance(global::amber.roboclaw_proto.Roboclaw.Descriptor.Extensions[3]);
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::amber.Drivermsg.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MotorsCommand : pb::GeneratedMessage<MotorsCommand, MotorsCommand.Builder> {
    private MotorsCommand() { }
    private static readonly MotorsCommand defaultInstance = new MotorsCommand().MakeReadOnly();
    private static readonly string[] _motorsCommandFieldNames = new string[] { "address", "m1Accel", "m1Buffered", "m1Distance", "m1Speed", "m2Accel", "m2Buffered", "m2Distance", "m2Speed" };
    private static readonly uint[] _motorsCommandFieldTags = new uint[] { 8, 24, 40, 32, 16, 56, 72, 64, 48 };
    public static MotorsCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MotorsCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MotorsCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_MotorsCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MotorsCommand, MotorsCommand.Builder> InternalFieldAccessors {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_MotorsCommand__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private uint address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint Address {
      get { return address_; }
    }
    
    public const int M1SpeedFieldNumber = 2;
    private bool hasM1Speed;
    private int m1Speed_;
    public bool HasM1Speed {
      get { return hasM1Speed; }
    }
    public int M1Speed {
      get { return m1Speed_; }
    }
    
    public const int M1AccelFieldNumber = 3;
    private bool hasM1Accel;
    private uint m1Accel_;
    public bool HasM1Accel {
      get { return hasM1Accel; }
    }
    [global::System.CLSCompliant(false)]
    public uint M1Accel {
      get { return m1Accel_; }
    }
    
    public const int M1DistanceFieldNumber = 4;
    private bool hasM1Distance;
    private uint m1Distance_;
    public bool HasM1Distance {
      get { return hasM1Distance; }
    }
    [global::System.CLSCompliant(false)]
    public uint M1Distance {
      get { return m1Distance_; }
    }
    
    public const int M1BufferedFieldNumber = 5;
    private bool hasM1Buffered;
    private bool m1Buffered_;
    public bool HasM1Buffered {
      get { return hasM1Buffered; }
    }
    public bool M1Buffered {
      get { return m1Buffered_; }
    }
    
    public const int M2SpeedFieldNumber = 6;
    private bool hasM2Speed;
    private int m2Speed_;
    public bool HasM2Speed {
      get { return hasM2Speed; }
    }
    public int M2Speed {
      get { return m2Speed_; }
    }
    
    public const int M2AccelFieldNumber = 7;
    private bool hasM2Accel;
    private uint m2Accel_;
    public bool HasM2Accel {
      get { return hasM2Accel; }
    }
    [global::System.CLSCompliant(false)]
    public uint M2Accel {
      get { return m2Accel_; }
    }
    
    public const int M2DistanceFieldNumber = 8;
    private bool hasM2Distance;
    private uint m2Distance_;
    public bool HasM2Distance {
      get { return hasM2Distance; }
    }
    [global::System.CLSCompliant(false)]
    public uint M2Distance {
      get { return m2Distance_; }
    }
    
    public const int M2BufferedFieldNumber = 9;
    private bool hasM2Buffered;
    private bool m2Buffered_;
    public bool HasM2Buffered {
      get { return hasM2Buffered; }
    }
    public bool M2Buffered {
      get { return m2Buffered_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _motorsCommandFieldNames;
      if (hasAddress) {
        output.WriteUInt32(1, field_names[0], Address);
      }
      if (hasM1Speed) {
        output.WriteInt32(2, field_names[4], M1Speed);
      }
      if (hasM1Accel) {
        output.WriteUInt32(3, field_names[1], M1Accel);
      }
      if (hasM1Distance) {
        output.WriteUInt32(4, field_names[3], M1Distance);
      }
      if (hasM1Buffered) {
        output.WriteBool(5, field_names[2], M1Buffered);
      }
      if (hasM2Speed) {
        output.WriteInt32(6, field_names[8], M2Speed);
      }
      if (hasM2Accel) {
        output.WriteUInt32(7, field_names[5], M2Accel);
      }
      if (hasM2Distance) {
        output.WriteUInt32(8, field_names[7], M2Distance);
      }
      if (hasM2Buffered) {
        output.WriteBool(9, field_names[6], M2Buffered);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Address);
        }
        if (hasM1Speed) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, M1Speed);
        }
        if (hasM1Accel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, M1Accel);
        }
        if (hasM1Distance) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, M1Distance);
        }
        if (hasM1Buffered) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, M1Buffered);
        }
        if (hasM2Speed) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, M2Speed);
        }
        if (hasM2Accel) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, M2Accel);
        }
        if (hasM2Distance) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, M2Distance);
        }
        if (hasM2Buffered) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, M2Buffered);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MotorsCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MotorsCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MotorsCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MotorsCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MotorsCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MotorsCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MotorsCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MotorsCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MotorsCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MotorsCommand result;
      
      private MotorsCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          MotorsCommand original = result;
          result = new MotorsCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MotorsCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::amber.roboclaw_proto.MotorsCommand.Descriptor; }
      }
      
      public override MotorsCommand DefaultInstanceForType {
        get { return global::amber.roboclaw_proto.MotorsCommand.DefaultInstance; }
      }
      
      public override MotorsCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MotorsCommand) {
          return MergeFrom((MotorsCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MotorsCommand other) {
        if (other == global::amber.roboclaw_proto.MotorsCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasM1Speed) {
          M1Speed = other.M1Speed;
        }
        if (other.HasM1Accel) {
          M1Accel = other.M1Accel;
        }
        if (other.HasM1Distance) {
          M1Distance = other.M1Distance;
        }
        if (other.HasM1Buffered) {
          M1Buffered = other.M1Buffered;
        }
        if (other.HasM2Speed) {
          M2Speed = other.M2Speed;
        }
        if (other.HasM2Accel) {
          M2Accel = other.M2Accel;
        }
        if (other.HasM2Distance) {
          M2Distance = other.M2Distance;
        }
        if (other.HasM2Buffered) {
          M2Buffered = other.M2Buffered;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_motorsCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _motorsCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddress = input.ReadUInt32(ref result.address_);
              break;
            }
            case 16: {
              result.hasM1Speed = input.ReadInt32(ref result.m1Speed_);
              break;
            }
            case 24: {
              result.hasM1Accel = input.ReadUInt32(ref result.m1Accel_);
              break;
            }
            case 32: {
              result.hasM1Distance = input.ReadUInt32(ref result.m1Distance_);
              break;
            }
            case 40: {
              result.hasM1Buffered = input.ReadBool(ref result.m1Buffered_);
              break;
            }
            case 48: {
              result.hasM2Speed = input.ReadInt32(ref result.m2Speed_);
              break;
            }
            case 56: {
              result.hasM2Accel = input.ReadUInt32(ref result.m2Accel_);
              break;
            }
            case 64: {
              result.hasM2Distance = input.ReadUInt32(ref result.m2Distance_);
              break;
            }
            case 72: {
              result.hasM2Buffered = input.ReadBool(ref result.m2Buffered_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      [global::System.CLSCompliant(false)]
      public uint Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddress(uint value) {
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = 0;
        return this;
      }
      
      public bool HasM1Speed {
        get { return result.hasM1Speed; }
      }
      public int M1Speed {
        get { return result.M1Speed; }
        set { SetM1Speed(value); }
      }
      public Builder SetM1Speed(int value) {
        PrepareBuilder();
        result.hasM1Speed = true;
        result.m1Speed_ = value;
        return this;
      }
      public Builder ClearM1Speed() {
        PrepareBuilder();
        result.hasM1Speed = false;
        result.m1Speed_ = 0;
        return this;
      }
      
      public bool HasM1Accel {
        get { return result.hasM1Accel; }
      }
      [global::System.CLSCompliant(false)]
      public uint M1Accel {
        get { return result.M1Accel; }
        set { SetM1Accel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetM1Accel(uint value) {
        PrepareBuilder();
        result.hasM1Accel = true;
        result.m1Accel_ = value;
        return this;
      }
      public Builder ClearM1Accel() {
        PrepareBuilder();
        result.hasM1Accel = false;
        result.m1Accel_ = 0;
        return this;
      }
      
      public bool HasM1Distance {
        get { return result.hasM1Distance; }
      }
      [global::System.CLSCompliant(false)]
      public uint M1Distance {
        get { return result.M1Distance; }
        set { SetM1Distance(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetM1Distance(uint value) {
        PrepareBuilder();
        result.hasM1Distance = true;
        result.m1Distance_ = value;
        return this;
      }
      public Builder ClearM1Distance() {
        PrepareBuilder();
        result.hasM1Distance = false;
        result.m1Distance_ = 0;
        return this;
      }
      
      public bool HasM1Buffered {
        get { return result.hasM1Buffered; }
      }
      public bool M1Buffered {
        get { return result.M1Buffered; }
        set { SetM1Buffered(value); }
      }
      public Builder SetM1Buffered(bool value) {
        PrepareBuilder();
        result.hasM1Buffered = true;
        result.m1Buffered_ = value;
        return this;
      }
      public Builder ClearM1Buffered() {
        PrepareBuilder();
        result.hasM1Buffered = false;
        result.m1Buffered_ = false;
        return this;
      }
      
      public bool HasM2Speed {
        get { return result.hasM2Speed; }
      }
      public int M2Speed {
        get { return result.M2Speed; }
        set { SetM2Speed(value); }
      }
      public Builder SetM2Speed(int value) {
        PrepareBuilder();
        result.hasM2Speed = true;
        result.m2Speed_ = value;
        return this;
      }
      public Builder ClearM2Speed() {
        PrepareBuilder();
        result.hasM2Speed = false;
        result.m2Speed_ = 0;
        return this;
      }
      
      public bool HasM2Accel {
        get { return result.hasM2Accel; }
      }
      [global::System.CLSCompliant(false)]
      public uint M2Accel {
        get { return result.M2Accel; }
        set { SetM2Accel(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetM2Accel(uint value) {
        PrepareBuilder();
        result.hasM2Accel = true;
        result.m2Accel_ = value;
        return this;
      }
      public Builder ClearM2Accel() {
        PrepareBuilder();
        result.hasM2Accel = false;
        result.m2Accel_ = 0;
        return this;
      }
      
      public bool HasM2Distance {
        get { return result.hasM2Distance; }
      }
      [global::System.CLSCompliant(false)]
      public uint M2Distance {
        get { return result.M2Distance; }
        set { SetM2Distance(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetM2Distance(uint value) {
        PrepareBuilder();
        result.hasM2Distance = true;
        result.m2Distance_ = value;
        return this;
      }
      public Builder ClearM2Distance() {
        PrepareBuilder();
        result.hasM2Distance = false;
        result.m2Distance_ = 0;
        return this;
      }
      
      public bool HasM2Buffered {
        get { return result.hasM2Buffered; }
      }
      public bool M2Buffered {
        get { return result.M2Buffered; }
        set { SetM2Buffered(value); }
      }
      public Builder SetM2Buffered(bool value) {
        PrepareBuilder();
        result.hasM2Buffered = true;
        result.m2Buffered_ = value;
        return this;
      }
      public Builder ClearM2Buffered() {
        PrepareBuilder();
        result.hasM2Buffered = false;
        result.m2Buffered_ = false;
        return this;
      }
    }
    static MotorsCommand() {
      object.ReferenceEquals(global::amber.roboclaw_proto.Roboclaw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetPidConstantsRequest : pb::GeneratedMessage<SetPidConstantsRequest, SetPidConstantsRequest.Builder> {
    private SetPidConstantsRequest() { }
    private static readonly SetPidConstantsRequest defaultInstance = new SetPidConstantsRequest().MakeReadOnly();
    private static readonly string[] _setPidConstantsRequestFieldNames = new string[] { "address", "d", "i", "p", "qpps" };
    private static readonly uint[] _setPidConstantsRequestFieldTags = new uint[] { 8, 40, 32, 24, 16 };
    public static SetPidConstantsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SetPidConstantsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SetPidConstantsRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_SetPidConstantsRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SetPidConstantsRequest, SetPidConstantsRequest.Builder> InternalFieldAccessors {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_SetPidConstantsRequest__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private uint address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint Address {
      get { return address_; }
    }
    
    public const int QppsFieldNumber = 2;
    private bool hasQpps;
    private uint qpps_;
    public bool HasQpps {
      get { return hasQpps; }
    }
    [global::System.CLSCompliant(false)]
    public uint Qpps {
      get { return qpps_; }
    }
    
    public const int PFieldNumber = 3;
    private bool hasP;
    private uint p_;
    public bool HasP {
      get { return hasP; }
    }
    [global::System.CLSCompliant(false)]
    public uint P {
      get { return p_; }
    }
    
    public const int IFieldNumber = 4;
    private bool hasI;
    private uint i_;
    public bool HasI {
      get { return hasI; }
    }
    [global::System.CLSCompliant(false)]
    public uint I {
      get { return i_; }
    }
    
    public const int DFieldNumber = 5;
    private bool hasD;
    private uint d_;
    public bool HasD {
      get { return hasD; }
    }
    [global::System.CLSCompliant(false)]
    public uint D {
      get { return d_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        if (!hasQpps) return false;
        if (!hasP) return false;
        if (!hasI) return false;
        if (!hasD) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _setPidConstantsRequestFieldNames;
      if (hasAddress) {
        output.WriteUInt32(1, field_names[0], Address);
      }
      if (hasQpps) {
        output.WriteUInt32(2, field_names[4], Qpps);
      }
      if (hasP) {
        output.WriteUInt32(3, field_names[3], P);
      }
      if (hasI) {
        output.WriteUInt32(4, field_names[2], I);
      }
      if (hasD) {
        output.WriteUInt32(5, field_names[1], D);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Address);
        }
        if (hasQpps) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Qpps);
        }
        if (hasP) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, P);
        }
        if (hasI) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, I);
        }
        if (hasD) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, D);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SetPidConstantsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SetPidConstantsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SetPidConstantsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SetPidConstantsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SetPidConstantsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SetPidConstantsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SetPidConstantsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SetPidConstantsRequest result;
      
      private SetPidConstantsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SetPidConstantsRequest original = result;
          result = new SetPidConstantsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SetPidConstantsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::amber.roboclaw_proto.SetPidConstantsRequest.Descriptor; }
      }
      
      public override SetPidConstantsRequest DefaultInstanceForType {
        get { return global::amber.roboclaw_proto.SetPidConstantsRequest.DefaultInstance; }
      }
      
      public override SetPidConstantsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SetPidConstantsRequest) {
          return MergeFrom((SetPidConstantsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SetPidConstantsRequest other) {
        if (other == global::amber.roboclaw_proto.SetPidConstantsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasQpps) {
          Qpps = other.Qpps;
        }
        if (other.HasP) {
          P = other.P;
        }
        if (other.HasI) {
          I = other.I;
        }
        if (other.HasD) {
          D = other.D;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_setPidConstantsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _setPidConstantsRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddress = input.ReadUInt32(ref result.address_);
              break;
            }
            case 16: {
              result.hasQpps = input.ReadUInt32(ref result.qpps_);
              break;
            }
            case 24: {
              result.hasP = input.ReadUInt32(ref result.p_);
              break;
            }
            case 32: {
              result.hasI = input.ReadUInt32(ref result.i_);
              break;
            }
            case 40: {
              result.hasD = input.ReadUInt32(ref result.d_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      [global::System.CLSCompliant(false)]
      public uint Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddress(uint value) {
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = 0;
        return this;
      }
      
      public bool HasQpps {
        get { return result.hasQpps; }
      }
      [global::System.CLSCompliant(false)]
      public uint Qpps {
        get { return result.Qpps; }
        set { SetQpps(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetQpps(uint value) {
        PrepareBuilder();
        result.hasQpps = true;
        result.qpps_ = value;
        return this;
      }
      public Builder ClearQpps() {
        PrepareBuilder();
        result.hasQpps = false;
        result.qpps_ = 0;
        return this;
      }
      
      public bool HasP {
        get { return result.hasP; }
      }
      [global::System.CLSCompliant(false)]
      public uint P {
        get { return result.P; }
        set { SetP(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetP(uint value) {
        PrepareBuilder();
        result.hasP = true;
        result.p_ = value;
        return this;
      }
      public Builder ClearP() {
        PrepareBuilder();
        result.hasP = false;
        result.p_ = 0;
        return this;
      }
      
      public bool HasI {
        get { return result.hasI; }
      }
      [global::System.CLSCompliant(false)]
      public uint I {
        get { return result.I; }
        set { SetI(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetI(uint value) {
        PrepareBuilder();
        result.hasI = true;
        result.i_ = value;
        return this;
      }
      public Builder ClearI() {
        PrepareBuilder();
        result.hasI = false;
        result.i_ = 0;
        return this;
      }
      
      public bool HasD {
        get { return result.hasD; }
      }
      [global::System.CLSCompliant(false)]
      public uint D {
        get { return result.D; }
        set { SetD(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetD(uint value) {
        PrepareBuilder();
        result.hasD = true;
        result.d_ = value;
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.hasD = false;
        result.d_ = 0;
        return this;
      }
    }
    static SetPidConstantsRequest() {
      object.ReferenceEquals(global::amber.roboclaw_proto.Roboclaw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CurrentSpeedRequest : pb::GeneratedMessage<CurrentSpeedRequest, CurrentSpeedRequest.Builder> {
    private CurrentSpeedRequest() { }
    private static readonly CurrentSpeedRequest defaultInstance = new CurrentSpeedRequest().MakeReadOnly();
    private static readonly string[] _currentSpeedRequestFieldNames = new string[] { "address", "m1Speed", "m2Speed" };
    private static readonly uint[] _currentSpeedRequestFieldTags = new uint[] { 8, 16, 24 };
    public static CurrentSpeedRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrentSpeedRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrentSpeedRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_CurrentSpeedRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrentSpeedRequest, CurrentSpeedRequest.Builder> InternalFieldAccessors {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_CurrentSpeedRequest__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private uint address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint Address {
      get { return address_; }
    }
    
    public const int M1SpeedFieldNumber = 2;
    private bool hasM1Speed;
    private bool m1Speed_;
    public bool HasM1Speed {
      get { return hasM1Speed; }
    }
    public bool M1Speed {
      get { return m1Speed_; }
    }
    
    public const int M2SpeedFieldNumber = 3;
    private bool hasM2Speed;
    private bool m2Speed_;
    public bool HasM2Speed {
      get { return hasM2Speed; }
    }
    public bool M2Speed {
      get { return m2Speed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        if (!hasM1Speed) return false;
        if (!hasM2Speed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currentSpeedRequestFieldNames;
      if (hasAddress) {
        output.WriteUInt32(1, field_names[0], Address);
      }
      if (hasM1Speed) {
        output.WriteBool(2, field_names[1], M1Speed);
      }
      if (hasM2Speed) {
        output.WriteBool(3, field_names[2], M2Speed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Address);
        }
        if (hasM1Speed) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, M1Speed);
        }
        if (hasM2Speed) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, M2Speed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrentSpeedRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrentSpeedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentSpeedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrentSpeedRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrentSpeedRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrentSpeedRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrentSpeedRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrentSpeedRequest result;
      
      private CurrentSpeedRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrentSpeedRequest original = result;
          result = new CurrentSpeedRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrentSpeedRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::amber.roboclaw_proto.CurrentSpeedRequest.Descriptor; }
      }
      
      public override CurrentSpeedRequest DefaultInstanceForType {
        get { return global::amber.roboclaw_proto.CurrentSpeedRequest.DefaultInstance; }
      }
      
      public override CurrentSpeedRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrentSpeedRequest) {
          return MergeFrom((CurrentSpeedRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrentSpeedRequest other) {
        if (other == global::amber.roboclaw_proto.CurrentSpeedRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasM1Speed) {
          M1Speed = other.M1Speed;
        }
        if (other.HasM2Speed) {
          M2Speed = other.M2Speed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currentSpeedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currentSpeedRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddress = input.ReadUInt32(ref result.address_);
              break;
            }
            case 16: {
              result.hasM1Speed = input.ReadBool(ref result.m1Speed_);
              break;
            }
            case 24: {
              result.hasM2Speed = input.ReadBool(ref result.m2Speed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      [global::System.CLSCompliant(false)]
      public uint Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddress(uint value) {
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = 0;
        return this;
      }
      
      public bool HasM1Speed {
        get { return result.hasM1Speed; }
      }
      public bool M1Speed {
        get { return result.M1Speed; }
        set { SetM1Speed(value); }
      }
      public Builder SetM1Speed(bool value) {
        PrepareBuilder();
        result.hasM1Speed = true;
        result.m1Speed_ = value;
        return this;
      }
      public Builder ClearM1Speed() {
        PrepareBuilder();
        result.hasM1Speed = false;
        result.m1Speed_ = false;
        return this;
      }
      
      public bool HasM2Speed {
        get { return result.hasM2Speed; }
      }
      public bool M2Speed {
        get { return result.M2Speed; }
        set { SetM2Speed(value); }
      }
      public Builder SetM2Speed(bool value) {
        PrepareBuilder();
        result.hasM2Speed = true;
        result.m2Speed_ = value;
        return this;
      }
      public Builder ClearM2Speed() {
        PrepareBuilder();
        result.hasM2Speed = false;
        result.m2Speed_ = false;
        return this;
      }
    }
    static CurrentSpeedRequest() {
      object.ReferenceEquals(global::amber.roboclaw_proto.Roboclaw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CurrentSpeed : pb::GeneratedMessage<CurrentSpeed, CurrentSpeed.Builder> {
    private CurrentSpeed() { }
    private static readonly CurrentSpeed defaultInstance = new CurrentSpeed().MakeReadOnly();
    private static readonly string[] _currentSpeedFieldNames = new string[] { "address", "m1Speed", "m2Speed" };
    private static readonly uint[] _currentSpeedFieldTags = new uint[] { 8, 16, 24 };
    public static CurrentSpeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrentSpeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrentSpeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_CurrentSpeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrentSpeed, CurrentSpeed.Builder> InternalFieldAccessors {
      get { return global::amber.roboclaw_proto.Roboclaw.internal__static_amber_roboclaw_proto_CurrentSpeed__FieldAccessorTable; }
    }
    
    public const int AddressFieldNumber = 1;
    private bool hasAddress;
    private uint address_;
    public bool HasAddress {
      get { return hasAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint Address {
      get { return address_; }
    }
    
    public const int M1SpeedFieldNumber = 2;
    private bool hasM1Speed;
    private int m1Speed_;
    public bool HasM1Speed {
      get { return hasM1Speed; }
    }
    public int M1Speed {
      get { return m1Speed_; }
    }
    
    public const int M2SpeedFieldNumber = 3;
    private bool hasM2Speed;
    private int m2Speed_;
    public bool HasM2Speed {
      get { return hasM2Speed; }
    }
    public int M2Speed {
      get { return m2Speed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAddress) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currentSpeedFieldNames;
      if (hasAddress) {
        output.WriteUInt32(1, field_names[0], Address);
      }
      if (hasM1Speed) {
        output.WriteInt32(2, field_names[1], M1Speed);
      }
      if (hasM2Speed) {
        output.WriteInt32(3, field_names[2], M2Speed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Address);
        }
        if (hasM1Speed) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, M1Speed);
        }
        if (hasM2Speed) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, M2Speed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrentSpeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrentSpeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrentSpeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentSpeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrentSpeed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrentSpeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrentSpeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrentSpeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrentSpeed result;
      
      private CurrentSpeed PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrentSpeed original = result;
          result = new CurrentSpeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrentSpeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::amber.roboclaw_proto.CurrentSpeed.Descriptor; }
      }
      
      public override CurrentSpeed DefaultInstanceForType {
        get { return global::amber.roboclaw_proto.CurrentSpeed.DefaultInstance; }
      }
      
      public override CurrentSpeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrentSpeed) {
          return MergeFrom((CurrentSpeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrentSpeed other) {
        if (other == global::amber.roboclaw_proto.CurrentSpeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.HasM1Speed) {
          M1Speed = other.M1Speed;
        }
        if (other.HasM2Speed) {
          M2Speed = other.M2Speed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currentSpeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currentSpeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAddress = input.ReadUInt32(ref result.address_);
              break;
            }
            case 16: {
              result.hasM1Speed = input.ReadInt32(ref result.m1Speed_);
              break;
            }
            case 24: {
              result.hasM2Speed = input.ReadInt32(ref result.m2Speed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      [global::System.CLSCompliant(false)]
      public uint Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAddress(uint value) {
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = 0;
        return this;
      }
      
      public bool HasM1Speed {
        get { return result.hasM1Speed; }
      }
      public int M1Speed {
        get { return result.M1Speed; }
        set { SetM1Speed(value); }
      }
      public Builder SetM1Speed(int value) {
        PrepareBuilder();
        result.hasM1Speed = true;
        result.m1Speed_ = value;
        return this;
      }
      public Builder ClearM1Speed() {
        PrepareBuilder();
        result.hasM1Speed = false;
        result.m1Speed_ = 0;
        return this;
      }
      
      public bool HasM2Speed {
        get { return result.hasM2Speed; }
      }
      public int M2Speed {
        get { return result.M2Speed; }
        set { SetM2Speed(value); }
      }
      public Builder SetM2Speed(int value) {
        PrepareBuilder();
        result.hasM2Speed = true;
        result.m2Speed_ = value;
        return this;
      }
      public Builder ClearM2Speed() {
        PrepareBuilder();
        result.hasM2Speed = false;
        result.m2Speed_ = 0;
        return this;
      }
    }
    static CurrentSpeed() {
      object.ReferenceEquals(global::amber.roboclaw_proto.Roboclaw.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
