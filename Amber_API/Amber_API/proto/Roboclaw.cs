// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Amber.Protos {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Roboclaw {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      registry.Add(global::Amber.Protos.Roboclaw.MotorsCommand);
      registry.Add(global::Amber.Protos.Roboclaw.CurrentSpeedRequest);
      registry.Add(global::Amber.Protos.Roboclaw.CurrentSpeed);
    }
    #endregion
    #region Extensions
    public const int MotorsCommandFieldNumber = 20;
    public static pb::GeneratedExtensionBase<global::Amber.Protos.MotorsSpeed> MotorsCommand;
    public const int CurrentSpeedRequestFieldNumber = 21;
    public static pb::GeneratedExtensionBase<bool> CurrentSpeedRequest;
    public const int CurrentSpeedFieldNumber = 22;
    public static pb::GeneratedExtensionBase<global::Amber.Protos.MotorsSpeed> CurrentSpeed;
    #endregion
    
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_amber_roboclaw_proto_MotorsSpeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.MotorsSpeed, global::Amber.Protos.MotorsSpeed.Builder> internal__static_amber_roboclaw_proto_MotorsSpeed__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Roboclaw() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5yb2JvY2xhdy5wcm90bxIUYW1iZXIucm9ib2NsYXdfcHJvdG8aD2RyaXZl" + 
          "cm1zZy5wcm90byJtCgtNb3RvcnNTcGVlZBIWCg5mcm9udExlZnRTcGVlZBgB" + 
          "IAEoBRIXCg9mcm9udFJpZ2h0U3BlZWQYAiABKAUSFQoNcmVhckxlZnRTcGVl" + 
          "ZBgDIAEoBRIWCg5yZWFyUmlnaHRTcGVlZBgEIAEoBTpKCg1tb3RvcnNDb21t" + 
          "YW5kEhAuYW1iZXIuRHJpdmVyTXNnGBQgASgLMiEuYW1iZXIucm9ib2NsYXdf" + 
          "cHJvdG8uTW90b3JzU3BlZWQ6LQoTY3VycmVudFNwZWVkUmVxdWVzdBIQLmFt" + 
          "YmVyLkRyaXZlck1zZxgVIAEoCDpJCgxjdXJyZW50U3BlZWQSEC5hbWJlci5E" + 
          "cml2ZXJNc2cYFiABKAsyIS5hbWJlci5yb2JvY2xhd19wcm90by5Nb3RvcnNT" + 
          "cGVlZEIwCh9wbC5lZHUuYWdoLmFtYmVyLnJvYm9jbGF3LnByb3RvQg1Sb2Jv" + 
          "Y2xhd1Byb3Rv");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_amber_roboclaw_proto_MotorsSpeed__Descriptor = Descriptor.MessageTypes[0];
        internal__static_amber_roboclaw_proto_MotorsSpeed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.MotorsSpeed, global::Amber.Protos.MotorsSpeed.Builder>(internal__static_amber_roboclaw_proto_MotorsSpeed__Descriptor,
                new string[] { "FrontLeftSpeed", "FrontRightSpeed", "RearLeftSpeed", "RearRightSpeed", });
        global::Amber.Protos.Roboclaw.MotorsCommand = pb::GeneratedSingleExtension<global::Amber.Protos.MotorsSpeed>.CreateInstance(global::Amber.Protos.Roboclaw.Descriptor.Extensions[0]);
        global::Amber.Protos.Roboclaw.CurrentSpeedRequest = pb::GeneratedSingleExtension<bool>.CreateInstance(global::Amber.Protos.Roboclaw.Descriptor.Extensions[1]);
        global::Amber.Protos.Roboclaw.CurrentSpeed = pb::GeneratedSingleExtension<global::Amber.Protos.MotorsSpeed>.CreateInstance(global::Amber.Protos.Roboclaw.Descriptor.Extensions[2]);
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Amber.Protos.Drivermsg.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MotorsSpeed : pb::GeneratedMessage<MotorsSpeed, MotorsSpeed.Builder> {
    private MotorsSpeed() { }
    private static readonly MotorsSpeed defaultInstance = new MotorsSpeed().MakeReadOnly();
    private static readonly string[] _motorsSpeedFieldNames = new string[] { "frontLeftSpeed", "frontRightSpeed", "rearLeftSpeed", "rearRightSpeed" };
    private static readonly uint[] _motorsSpeedFieldTags = new uint[] { 8, 16, 24, 32 };
    public static MotorsSpeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MotorsSpeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MotorsSpeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.Roboclaw.internal__static_amber_roboclaw_proto_MotorsSpeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MotorsSpeed, MotorsSpeed.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.Roboclaw.internal__static_amber_roboclaw_proto_MotorsSpeed__FieldAccessorTable; }
    }
    
    public const int FrontLeftSpeedFieldNumber = 1;
    private bool hasFrontLeftSpeed;
    private int frontLeftSpeed_;
    public bool HasFrontLeftSpeed {
      get { return hasFrontLeftSpeed; }
    }
    public int FrontLeftSpeed {
      get { return frontLeftSpeed_; }
    }
    
    public const int FrontRightSpeedFieldNumber = 2;
    private bool hasFrontRightSpeed;
    private int frontRightSpeed_;
    public bool HasFrontRightSpeed {
      get { return hasFrontRightSpeed; }
    }
    public int FrontRightSpeed {
      get { return frontRightSpeed_; }
    }
    
    public const int RearLeftSpeedFieldNumber = 3;
    private bool hasRearLeftSpeed;
    private int rearLeftSpeed_;
    public bool HasRearLeftSpeed {
      get { return hasRearLeftSpeed; }
    }
    public int RearLeftSpeed {
      get { return rearLeftSpeed_; }
    }
    
    public const int RearRightSpeedFieldNumber = 4;
    private bool hasRearRightSpeed;
    private int rearRightSpeed_;
    public bool HasRearRightSpeed {
      get { return hasRearRightSpeed; }
    }
    public int RearRightSpeed {
      get { return rearRightSpeed_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _motorsSpeedFieldNames;
      if (hasFrontLeftSpeed) {
        output.WriteInt32(1, field_names[0], FrontLeftSpeed);
      }
      if (hasFrontRightSpeed) {
        output.WriteInt32(2, field_names[1], FrontRightSpeed);
      }
      if (hasRearLeftSpeed) {
        output.WriteInt32(3, field_names[2], RearLeftSpeed);
      }
      if (hasRearRightSpeed) {
        output.WriteInt32(4, field_names[3], RearRightSpeed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrontLeftSpeed) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FrontLeftSpeed);
        }
        if (hasFrontRightSpeed) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, FrontRightSpeed);
        }
        if (hasRearLeftSpeed) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, RearLeftSpeed);
        }
        if (hasRearRightSpeed) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, RearRightSpeed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MotorsSpeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MotorsSpeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MotorsSpeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MotorsSpeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MotorsSpeed MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MotorsSpeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MotorsSpeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MotorsSpeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MotorsSpeed result;
      
      private MotorsSpeed PrepareBuilder() {
        if (resultIsReadOnly) {
          MotorsSpeed original = result;
          result = new MotorsSpeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MotorsSpeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.MotorsSpeed.Descriptor; }
      }
      
      public override MotorsSpeed DefaultInstanceForType {
        get { return global::Amber.Protos.MotorsSpeed.DefaultInstance; }
      }
      
      public override MotorsSpeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MotorsSpeed) {
          return MergeFrom((MotorsSpeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MotorsSpeed other) {
        if (other == global::Amber.Protos.MotorsSpeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrontLeftSpeed) {
          FrontLeftSpeed = other.FrontLeftSpeed;
        }
        if (other.HasFrontRightSpeed) {
          FrontRightSpeed = other.FrontRightSpeed;
        }
        if (other.HasRearLeftSpeed) {
          RearLeftSpeed = other.RearLeftSpeed;
        }
        if (other.HasRearRightSpeed) {
          RearRightSpeed = other.RearRightSpeed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_motorsSpeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _motorsSpeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrontLeftSpeed = input.ReadInt32(ref result.frontLeftSpeed_);
              break;
            }
            case 16: {
              result.hasFrontRightSpeed = input.ReadInt32(ref result.frontRightSpeed_);
              break;
            }
            case 24: {
              result.hasRearLeftSpeed = input.ReadInt32(ref result.rearLeftSpeed_);
              break;
            }
            case 32: {
              result.hasRearRightSpeed = input.ReadInt32(ref result.rearRightSpeed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrontLeftSpeed {
        get { return result.hasFrontLeftSpeed; }
      }
      public int FrontLeftSpeed {
        get { return result.FrontLeftSpeed; }
        set { SetFrontLeftSpeed(value); }
      }
      public Builder SetFrontLeftSpeed(int value) {
        PrepareBuilder();
        result.hasFrontLeftSpeed = true;
        result.frontLeftSpeed_ = value;
        return this;
      }
      public Builder ClearFrontLeftSpeed() {
        PrepareBuilder();
        result.hasFrontLeftSpeed = false;
        result.frontLeftSpeed_ = 0;
        return this;
      }
      
      public bool HasFrontRightSpeed {
        get { return result.hasFrontRightSpeed; }
      }
      public int FrontRightSpeed {
        get { return result.FrontRightSpeed; }
        set { SetFrontRightSpeed(value); }
      }
      public Builder SetFrontRightSpeed(int value) {
        PrepareBuilder();
        result.hasFrontRightSpeed = true;
        result.frontRightSpeed_ = value;
        return this;
      }
      public Builder ClearFrontRightSpeed() {
        PrepareBuilder();
        result.hasFrontRightSpeed = false;
        result.frontRightSpeed_ = 0;
        return this;
      }
      
      public bool HasRearLeftSpeed {
        get { return result.hasRearLeftSpeed; }
      }
      public int RearLeftSpeed {
        get { return result.RearLeftSpeed; }
        set { SetRearLeftSpeed(value); }
      }
      public Builder SetRearLeftSpeed(int value) {
        PrepareBuilder();
        result.hasRearLeftSpeed = true;
        result.rearLeftSpeed_ = value;
        return this;
      }
      public Builder ClearRearLeftSpeed() {
        PrepareBuilder();
        result.hasRearLeftSpeed = false;
        result.rearLeftSpeed_ = 0;
        return this;
      }
      
      public bool HasRearRightSpeed {
        get { return result.hasRearRightSpeed; }
      }
      public int RearRightSpeed {
        get { return result.RearRightSpeed; }
        set { SetRearRightSpeed(value); }
      }
      public Builder SetRearRightSpeed(int value) {
        PrepareBuilder();
        result.hasRearRightSpeed = true;
        result.rearRightSpeed_ = value;
        return this;
      }
      public Builder ClearRearRightSpeed() {
        PrepareBuilder();
        result.hasRearRightSpeed = false;
        result.rearRightSpeed_ = 0;
        return this;
      }
    }
    static MotorsSpeed() {
      object.ReferenceEquals(global::Amber.Protos.Roboclaw.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
