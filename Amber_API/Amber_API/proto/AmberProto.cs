// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Amber.Protos {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class AmberProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_amber_DriverHdr__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DriverHdr, global::Amber.Protos.DriverHdr.Builder> internal__static_amber_DriverHdr__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_amber_DriverMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DriverMsg, global::Amber.Protos.DriverMsg.Builder> internal__static_amber_DriverMsg__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static AmberProto() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg9kcml2ZXJtc2cucHJvdG8SBWFtYmVyGiRnb29nbGUvcHJvdG9idWYvY3No" + 
          "YXJwX29wdGlvbnMucHJvdG8iSAoJRHJpdmVySGRyEhIKCmRldmljZVR5cGUY" + 
          "ASABKAUSEAoIZGV2aWNlSUQYAiABKAUSFQoJY2xpZW50SURzGAMgAygFQgIQ" + 
          "ASK5AQoJRHJpdmVyTXNnEiYKBHR5cGUYAiACKA4yGC5hbWJlci5Ecml2ZXJN" + 
          "c2cuTXNnVHlwZRIOCgZzeW5OdW0YAyABKA0SDgoGYWNrTnVtGAQgASgNEhMK" + 
          "C2xpc3RlbmVyTnVtGAUgASgNIkkKB01zZ1R5cGUSCAoEREFUQRABEggKBFBJ" + 
          "TkcQAhIICgRQT05HEAMSDwoLQ0xJRU5UX0RJRUQQBBIPCgtEUklWRVJfRElF" + 
          "RBAFKgQICBBAKjYKCkRldmljZVR5cGUSCwoHTklORURPRhABEgwKCFJPQk9D" + 
          "TEFXEAISDQoJU1RBUkdBWkVSEANCH0gBwj4aCgxBbWJlci5Qcm90b3MSCkFt" + 
          "YmVyUHJvdG8=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_amber_DriverHdr__Descriptor = Descriptor.MessageTypes[0];
        internal__static_amber_DriverHdr__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DriverHdr, global::Amber.Protos.DriverHdr.Builder>(internal__static_amber_DriverHdr__Descriptor,
                new string[] { "DeviceType", "DeviceID", "ClientIDs", });
        internal__static_amber_DriverMsg__Descriptor = Descriptor.MessageTypes[1];
        internal__static_amber_DriverMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Amber.Protos.DriverMsg, global::Amber.Protos.DriverMsg.Builder>(internal__static_amber_DriverMsg__Descriptor,
                new string[] { "Type", "SynNum", "AckNum", "ListenerNum", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum DeviceType {
    NINEDOF = 1,
    ROBOCLAW = 2,
    STARGAZER = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DriverHdr : pb::GeneratedMessage<DriverHdr, DriverHdr.Builder> {
    private DriverHdr() { }
    private static readonly DriverHdr defaultInstance = new DriverHdr().MakeReadOnly();
    private static readonly string[] _driverHdrFieldNames = new string[] { "clientIDs", "deviceID", "deviceType" };
    private static readonly uint[] _driverHdrFieldTags = new uint[] { 26, 16, 8 };
    public static DriverHdr DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DriverHdr DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DriverHdr ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.AmberProto.internal__static_amber_DriverHdr__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DriverHdr, DriverHdr.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.AmberProto.internal__static_amber_DriverHdr__FieldAccessorTable; }
    }
    
    public const int DeviceTypeFieldNumber = 1;
    private bool hasDeviceType;
    private int deviceType_;
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public int DeviceType {
      get { return deviceType_; }
    }
    
    public const int DeviceIDFieldNumber = 2;
    private bool hasDeviceID;
    private int deviceID_;
    public bool HasDeviceID {
      get { return hasDeviceID; }
    }
    public int DeviceID {
      get { return deviceID_; }
    }
    
    public const int ClientIDsFieldNumber = 3;
    private int clientIDsMemoizedSerializedSize;
    private pbc::PopsicleList<int> clientIDs_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClientIDsList {
      get { return pbc::Lists.AsReadOnly(clientIDs_); }
    }
    public int ClientIDsCount {
      get { return clientIDs_.Count; }
    }
    public int GetClientIDs(int index) {
      return clientIDs_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _driverHdrFieldNames;
      if (hasDeviceType) {
        output.WriteInt32(1, field_names[2], DeviceType);
      }
      if (hasDeviceID) {
        output.WriteInt32(2, field_names[1], DeviceID);
      }
      if (clientIDs_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[0], clientIDsMemoizedSerializedSize, clientIDs_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, DeviceType);
        }
        if (hasDeviceID) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, DeviceID);
        }
        {
          int dataSize = 0;
          foreach (int element in ClientIDsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (clientIDs_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          clientIDsMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DriverHdr ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DriverHdr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DriverHdr ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DriverHdr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DriverHdr ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DriverHdr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DriverHdr ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DriverHdr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DriverHdr ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DriverHdr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DriverHdr MakeReadOnly() {
      clientIDs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DriverHdr prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DriverHdr, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DriverHdr cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DriverHdr result;
      
      private DriverHdr PrepareBuilder() {
        if (resultIsReadOnly) {
          DriverHdr original = result;
          result = new DriverHdr();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DriverHdr MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.DriverHdr.Descriptor; }
      }
      
      public override DriverHdr DefaultInstanceForType {
        get { return global::Amber.Protos.DriverHdr.DefaultInstance; }
      }
      
      public override DriverHdr BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DriverHdr) {
          return MergeFrom((DriverHdr) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DriverHdr other) {
        if (other == global::Amber.Protos.DriverHdr.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasDeviceID) {
          DeviceID = other.DeviceID;
        }
        if (other.clientIDs_.Count != 0) {
          result.clientIDs_.Add(other.clientIDs_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_driverHdrFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _driverHdrFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
              break;
            }
            case 16: {
              result.hasDeviceID = input.ReadInt32(ref result.deviceID_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.clientIDs_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public int DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(int value) {
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = 0;
        return this;
      }
      
      public bool HasDeviceID {
        get { return result.hasDeviceID; }
      }
      public int DeviceID {
        get { return result.DeviceID; }
        set { SetDeviceID(value); }
      }
      public Builder SetDeviceID(int value) {
        PrepareBuilder();
        result.hasDeviceID = true;
        result.deviceID_ = value;
        return this;
      }
      public Builder ClearDeviceID() {
        PrepareBuilder();
        result.hasDeviceID = false;
        result.deviceID_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClientIDsList {
        get { return PrepareBuilder().clientIDs_; }
      }
      public int ClientIDsCount {
        get { return result.ClientIDsCount; }
      }
      public int GetClientIDs(int index) {
        return result.GetClientIDs(index);
      }
      public Builder SetClientIDs(int index, int value) {
        PrepareBuilder();
        result.clientIDs_[index] = value;
        return this;
      }
      public Builder AddClientIDs(int value) {
        PrepareBuilder();
        result.clientIDs_.Add(value);
        return this;
      }
      public Builder AddRangeClientIDs(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clientIDs_.Add(values);
        return this;
      }
      public Builder ClearClientIDs() {
        PrepareBuilder();
        result.clientIDs_.Clear();
        return this;
      }
    }
    static DriverHdr() {
      object.ReferenceEquals(global::Amber.Protos.AmberProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DriverMsg : pb::ExtendableMessage<DriverMsg, DriverMsg.Builder> {
    private DriverMsg() { }
    private static readonly DriverMsg defaultInstance = new DriverMsg().MakeReadOnly();
    private static readonly string[] _driverMsgFieldNames = new string[] { "ackNum", "listenerNum", "synNum", "type" };
    private static readonly uint[] _driverMsgFieldTags = new uint[] { 32, 40, 24, 16 };
    public static DriverMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DriverMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DriverMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Amber.Protos.AmberProto.internal__static_amber_DriverMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DriverMsg, DriverMsg.Builder> InternalFieldAccessors {
      get { return global::Amber.Protos.AmberProto.internal__static_amber_DriverMsg__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MsgType {
        DATA = 1,
        PING = 2,
        PONG = 3,
        CLIENT_DIED = 4,
        DRIVER_DIED = 5,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::Amber.Protos.DriverMsg.Types.MsgType type_ = global::Amber.Protos.DriverMsg.Types.MsgType.DATA;
    public bool HasType {
      get { return hasType; }
    }
    public global::Amber.Protos.DriverMsg.Types.MsgType Type {
      get { return type_; }
    }
    
    public const int SynNumFieldNumber = 3;
    private bool hasSynNum;
    private uint synNum_;
    public bool HasSynNum {
      get { return hasSynNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint SynNum {
      get { return synNum_; }
    }
    
    public const int AckNumFieldNumber = 4;
    private bool hasAckNum;
    private uint ackNum_;
    public bool HasAckNum {
      get { return hasAckNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint AckNum {
      get { return ackNum_; }
    }
    
    public const int ListenerNumFieldNumber = 5;
    private bool hasListenerNum;
    private uint listenerNum_;
    public bool HasListenerNum {
      get { return hasListenerNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint ListenerNum {
      get { return listenerNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _driverMsgFieldNames;
      pb::ExtendableMessage<DriverMsg, DriverMsg.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasType) {
        output.WriteEnum(2, field_names[3], (int) Type, Type);
      }
      if (hasSynNum) {
        output.WriteUInt32(3, field_names[2], SynNum);
      }
      if (hasAckNum) {
        output.WriteUInt32(4, field_names[0], AckNum);
      }
      if (hasListenerNum) {
        output.WriteUInt32(5, field_names[1], ListenerNum);
      }
      extensionWriter.WriteUntil(64, output);
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasSynNum) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, SynNum);
        }
        if (hasAckNum) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, AckNum);
        }
        if (hasListenerNum) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, ListenerNum);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DriverMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DriverMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DriverMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DriverMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DriverMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DriverMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DriverMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DriverMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DriverMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DriverMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DriverMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DriverMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilder<DriverMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DriverMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DriverMsg result;
      
      private DriverMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          DriverMsg original = result;
          result = new DriverMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DriverMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Amber.Protos.DriverMsg.Descriptor; }
      }
      
      public override DriverMsg DefaultInstanceForType {
        get { return global::Amber.Protos.DriverMsg.DefaultInstance; }
      }
      
      public override DriverMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DriverMsg) {
          return MergeFrom((DriverMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DriverMsg other) {
        if (other == global::Amber.Protos.DriverMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSynNum) {
          SynNum = other.SynNum;
        }
        if (other.HasAckNum) {
          AckNum = other.AckNum;
        }
        if (other.HasListenerNum) {
          ListenerNum = other.ListenerNum;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_driverMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _driverMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasSynNum = input.ReadUInt32(ref result.synNum_);
              break;
            }
            case 32: {
              result.hasAckNum = input.ReadUInt32(ref result.ackNum_);
              break;
            }
            case 40: {
              result.hasListenerNum = input.ReadUInt32(ref result.listenerNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Amber.Protos.DriverMsg.Types.MsgType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Amber.Protos.DriverMsg.Types.MsgType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Amber.Protos.DriverMsg.Types.MsgType.DATA;
        return this;
      }
      
      public bool HasSynNum {
        get { return result.hasSynNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint SynNum {
        get { return result.SynNum; }
        set { SetSynNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSynNum(uint value) {
        PrepareBuilder();
        result.hasSynNum = true;
        result.synNum_ = value;
        return this;
      }
      public Builder ClearSynNum() {
        PrepareBuilder();
        result.hasSynNum = false;
        result.synNum_ = 0;
        return this;
      }
      
      public bool HasAckNum {
        get { return result.hasAckNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint AckNum {
        get { return result.AckNum; }
        set { SetAckNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAckNum(uint value) {
        PrepareBuilder();
        result.hasAckNum = true;
        result.ackNum_ = value;
        return this;
      }
      public Builder ClearAckNum() {
        PrepareBuilder();
        result.hasAckNum = false;
        result.ackNum_ = 0;
        return this;
      }
      
      public bool HasListenerNum {
        get { return result.hasListenerNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint ListenerNum {
        get { return result.ListenerNum; }
        set { SetListenerNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetListenerNum(uint value) {
        PrepareBuilder();
        result.hasListenerNum = true;
        result.listenerNum_ = value;
        return this;
      }
      public Builder ClearListenerNum() {
        PrepareBuilder();
        result.hasListenerNum = false;
        result.listenerNum_ = 0;
        return this;
      }
    }
    static DriverMsg() {
      object.ReferenceEquals(global::Amber.Protos.AmberProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
